#!/usr/bin/perl

use strict;

use utf8;
use open qw(:std :utf8);

use lib "/usr/lib/amms/";
use AMMS::Lib qw(:all);
use AMMS::Client;
use File::Which;

my ($uri, $ident, $date, $detail) = @ARGV;

die "No uri" unless $uri;
die "No ident" unless $ident;

my $ammsc = AMMS::Client->new;

unless ($ammsc->connect ($uri)){
    die "Can't connect to amms daemon";
}

my $limit = xb $ammsc->exe ("get_anylimit", {ident => $ident});
die "Not found" unless ($limit);

my $all_limits = xb $ammsc->exe ("get_limit");

$date ||= "today";
$date = fdate ($date);

my $grep = which ("grep");

my (%uri, @xident);

if ($limit->{type} eq 'P'){
    
    for my $type ('T','I'){        
        
        $limit = $all_limits->{$type};

        for (keys %$limit){
            if ($limit->{$_}{parent} eq $ident){
                push @xident, [$type, $_]; # children
            }
        }
    }
}
else {
    push @xident, [$limit->{type}, $limit->{ident}];
}

for my $xident (@xident) {

    my ($type, $ident) = @$xident;
    my $file = locate ($ident, "uri");

    my $text = `$grep $date $file`;
    my @line = split ("\n", $text);

    # values from ident/uri

    for (@line){
        my ($stub, $stub, $key, $size) = split;
        $key = domain ($key) unless ($detail);
        $uri{$key} += $size;
    }

    # values from ammsd

    my $ts = ts ($all_limits->{$type}{$ident}{ts});
    $date =~ s/"//g;

    if (grep (/$date/, $ts)){
        
        my $uri2 = xb $ammsc->exe ("get_uri", {type => $type, ident => $ident});
        
        for my $key2 (keys %$uri2){
            my $key = $key2;
            $key = domain ($key) unless ($detail);
            $uri{$key} += $uri2->{$key2};
        }
    }
}

my @keys = sort { $uri{$b} <=> $uri{$a} } keys %uri; # sort by value

for (@keys) {
    printf "%7s %s\n", kmg ($uri{$_}), $_;
};

sub domain {

    my $uri = shift;

    $uri =~ /\/\/(.+?)\//;

    my $dom = $1 || $uri;

    return $dom;
}
