#!/usr/bin/perl
# AMMS console client (C) 2012

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# any later version.
        
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
                
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

use strict;
no  strict "refs";
use feature qw(say);

use lib "/usr/lib/amms";
use AMMS::Lib qw(:all);
use AMMS::Client;

my $VERSION = 0.2;

my (%menu, %type, %stat);

$menu {action} = [qw(limit reset extension status)];
$menu {type} = [qw(temp ident parent)];
$menu {stat} = [qw(off on disabled)];

%type = (temp => "T", ident => "I", parent => "P");
%stat = (off => 0, on => 1, disabled => 2);

unless (@ARGV){
    say "Usage: ammsc uri arguments";
    exit;
}

my ($uri, $action, @argv) = @ARGV;

my $ammsc = AMMS::Client->new;
   $ammsc->connect ($uri) || die "Can't connect to ammsd URI: $uri";

my $res = $ammsc->exe ("ls_extension");
die $res->{s} if ($res->{s} =~ /^ERR/);

my $ext = xb $res;
push @{$menu {action}}, @$ext;

$action = cword ($menu {action}, $action);
$action || die "Undefined action";

if (exists (&$action)){ # run internal
    &$action (@argv);
}
else { # run extension
    $uri = xb $ammsc->exe ("get_extension_runner");
    $ammsc->connect ($uri) || die "Can't connect to extension runner URI: $uri";
    $res = $ammsc->exe ("run_extension", {name=>$action, arg=>\@argv});
    die $res->{s} if ($res->{s} =~ /^ERR/);
    print xb $res;
}

sub cword { # complete word

    my ($word_list, $word_part) = @_;

    unless ($word_list && $word_part){
        return undef;
    }
    my $word;

    for my $wrd (@$word_list){
        if ($wrd =~ /^$word_part/){
            return undef if ($word);
            $word = $wrd;
        }
    }
    return $word;
}

sub limit {

#   ident (80M |no|state|desc|parent) [1d] [temp|ident|parent]

    my ($ident, $value, $period, $type) = @_;

    my ($res, $limit);

    unless ($ident){ # list all limits

        $limit = xb $ammsc->exe ("get_limit");

        my @limit;

        for $type (keys %$limit){
            my $limit_list = $limit->{$type};
            for (keys %$limit_list){
                $limit->{$type}{$_}{type} = $type;
                $limit->{$type}{$_}{ident} = $_;
                push @limit, $limit->{$type}{$_};
            }
        }

        my @limit_val;
        my @limit_sorted;
        
        for my $l (@limit){

            unless (defined $l->{value}){
                $l->{value} = "-";
            }

            # type ident parent value period stat ts desc
            push @limit_sorted, sprintf ("%s %-16s %-16s %6s %6s %s %s %s %s",
                 $l->{type},
                 $l->{ident},
                 $l->{parent} || "-",
                 $l->{value},
                 $l->{period} || "-",
                 $l->{stat},
                 format_time ($l->{ts}),
                 $l->{desc} || "-");
        }
        @limit_sorted = sort @limit_sorted;
        say join ("\n", @limit_sorted);
        return;
    }

    $type = cword ($menu {type}, $type); # complete type
    $type = $type {$type};

    unless ($type){

        $limit = xb $ammsc->exe ("get_anylimit", {ident=>$ident});

        unless (defined $value){ # print limit
            die "Not found" unless ($limit);
            printf ("%s %s %s %s %s %s %s %s %s\n",
                $limit->{type},
                $limit->{ident},
                $limit->{parent} || "-",
                $limit->{value},
                $limit->{period},
                $limit->{stat},
                $limit->{ts},
                format_time ($limit->{ts}),
                $limit->{desc});
            return;
        }
        if ($limit){
            $type = $limit->{type};
        }
        $type ||= $type {ident}; # set default limit type to ident
    }
    if ($value eq "no"){

        say xs $ammsc->exe ("remove_limit", {type=>$type, ident=>$ident});
        return;
    }
    elsif ($value =~ /^st*a*t*e*/i){

        die "Not found" unless ($limit);

        my $stat = $period;

        if ($stat){
            $stat = cword ($menu {stat}, $stat); # complete type
            $stat = $stat {$stat};
            unless (defined $stat){
                die "Unknown stat value";
            }
            say xs $ammsc->exe ("update_limit", {type=>$type, ident=>$ident, stat=>$stat});
        }
        else { # print stat
            say $limit->{stat};
        }
        return;
    }
    elsif ($value =~ /^pa*r*e*n*t*/){

        my $par = $period;

        unless (defined $par){
            die "Not found" unless ($limit);
            say $limit->{parent};
        }
        else {
            unless ($limit){
                $ammsc->exe ("add_limit", {type=>$type, ident=>$ident, stat=>$stat{on}});
            }
            my $parent = xb $ammsc->exe ("get_limit", {type=>$type{parent}, ident=>$par});

            if ($par eq "no"){
                say xs $ammsc->exe ("update_limit", {type=>$type, ident=>$ident, parent=>undef, value=>$limit->{value}, period=>$limit->{period}});
                $ammsc->exe ("update_limit_ts", {type=>$type, ident=>$ident, period=>$limit->{period}});
            }
            else {
                say xs $ammsc->exe ("update_limit", {type=>$type, ident=>$ident, parent=>$par, value=>undef, period=>undef});
                $ammsc->exe ("update_limit_ts", {type=>$type, ident=>$ident, period=>$parent->{period}});
            }
        }
        return;
    }
    elsif ($value =~ /^de*s*c*/){
        die "Not found" unless ($limit);
        my $desc = $period;
        unless (defined $desc){
            say $limit->{desc};
        }
        else {
            undef $desc if ($desc eq "no");
            say xs $ammsc->exe ("update_limit", {type=>$type, ident=>$ident, desc=>$desc});
        }
        return;
    }
    elsif ($value =~ /^re*n*a*m*e*/){
        
        unless ($limit){
            die "Not found";
        }
        
        my $ident2 = $period;
        undef $period;
        
        unless ($ident2){
            die "Unknown ident2";
        }
        
        $ammsc->exe ("remove_limit", {type=>$type, ident=>$ident});
        
        $limit->{ident} = $ident2;
        
        if ($limit->{parent}){ # inherit value, period from parent
            $period = $limit->{period};
            delete $limit->{value};
            delete $limit->{period};
        }

        say xs $ammsc->exe ("add_limit", $limit);
        $ammsc->exe ("update_limit_ts", {type=>$limit->{type}, ident=>$limit->{ident}, period=>$period}) if $period;
        return;
    }
    elsif ($value =~ /^ov*e*r*/){
        if ($period eq "no"){
            limit ($ident, "no");
            return;
        }
        undef $limit;
        $type = $type {temp};
        $value = 0;
    }

    if ($value !~ /^\d+[kmg]??$/i){
        die "Bad value format";
    }

    unless ($limit){ # new limit
        $limit = {type=>$type, ident=>$ident, value=>uc($value), period=>$period || "1d", stat=>$stat{on}};
    }
    else { # update limit
       $limit->{value} = uc($value) if defined $value; 
       $limit->{period} = $period if defined $period;
    }

    if ($limit->{parent}){ # inherit value, period from parent
        delete $limit->{value};
        delete $limit->{period};
    }

    say xs $ammsc->exe ("add_limit", $limit);
}

sub reset {

    my $ident = shift;
    say xs $ammsc->exe ("reset_traf", {ident=>$ident});
}

sub extension {
    say join ("\n", sort @$ext);
}

sub status {

    my ($ident) = @_;

    my ($limit, $traf);

    unless ($ident){ # list all stats

        $limit = xb $ammsc->exe ("get_limit");
        $traf = xb $ammsc->exe ("get_traf");

        my @limit;

        for my $type (keys %$limit){
            my $limit_list = $limit->{$type};
            for (keys %$limit_list){
                $limit->{$type}{$_}{type} = $type;
                $limit->{$type}{$_}{ident} = $_;
                push @limit, $limit->{$type}{$_};
            }
        }

        my @limit_val;
        my @limit_sorted;
        
        for my $l (@limit){

            unless (defined $l->{value}){
                $l->{value} = "-";
            }

            next if (!$traf->{$l->{ident}}[0] && !$traf->{$l->{ident}}[1]); # skip items with 0/0 traf

            # type ident parent traf cached value period stat ts desc
            push @limit_sorted, sprintf ("%s %-16s %-16s %10s %10s %6s %6s %s %s %s %s",
                 $l->{type},
                 $l->{ident},
                 $l->{parent} || "-",
                 kmg ($traf->{$l->{ident}}[0]) || 0,
                 kmg ($traf->{$l->{ident}}[1]) || 0,
                 $l->{value},
                 $l->{period} || "-",
                 $l->{stat},
                 format_time ($l->{ts}),
                 $l->{desc} || "-");
        }
        @limit_sorted = sort @limit_sorted;
        say join ("\n", @limit_sorted);
        return;
    }
    else {

        $limit = xb $ammsc->exe ("get_anylimit", {ident=>$ident});
        
        die "Not found" unless ($limit);

        $traf = xb $ammsc->exe ("get_traf", {ident=>$ident});

        printf ("%s %s %s %s %s %s %s %s %s %s %s\n",
            $limit->{type},
            $limit->{ident},
            $limit->{parent} || "-",
            kmg ($traf->[0]) || 0,
            kmg ($traf->[1]) || 0,
            $limit->{value},
            $limit->{period},
            $limit->{stat},
            $limit->{ts},
            format_time ($limit->{ts}),
            $limit->{desc});
    }
}

sub format_time {

    my $ts = shift;
    my @tm = localtime ($ts);

    return sprintf ("%04d-%02d-%02d %02d:%02d:%02d", $tm[5]+1900, $tm[4]+1, $tm[3], $tm[2], $tm[1], $tm[0]);
}

