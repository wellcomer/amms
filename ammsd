#!/usr/bin/perl

# AMMS FCGI (C) 2012

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# any later version.
        
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
                
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

use strict;
no warnings;

package AMMSD;

use lib "/usr/lib/amms";
use AMMS::Lib qw(:all);
use AMMS::Client;

use FCGI;
use FCGI::ProcManager qw(pm_manage pm_pre_dispatch pm_post_dispatch);
use File::Path qw(remove_tree);
use Daemon::Generic;
use URI::Escape;
use Time::Local;

our $NAME = "ammsd";
our $VERSION = 1.9;
our $DEBUG = 0;

if ($DEBUG){
    use Data::Dumper;
}

my ($conf, $fh, $json);

newdaemon (
    pidfile  => locate_pid ("$NAME.pid"),
    progname => $NAME
);

sub gd_preconfig {
    
    my ($self) = @_;

    $conf = conf ($self->{configfile});

    my $loc = locate (".amms", "limit");
    open ($fh->{limit}, "+<", $loc) or die "$! " . $loc;

    $loc = locate (".amms", "traf");
    open ($fh->{traf}, "+<", $loc) or die "$! " . $loc;

    $loc = locate (".amms", "uri");
    open ($fh->{uri}, "+<", $loc) or die "$! " . $loc;
    
    $json->{limit} = decf ($fh->{limit});
    $json->{traf} = decf ($fh->{traf});
    $json->{uri} = decf ($fh->{uri});
    
    mkdir ($conf->{pid_base}, 0755);

    return ();
}

sub gd_kill {

    my ($self, $pid) = @_;

    if (kill ("TERM", $pid)){
        print "Process $pid is gone\n";
    }
    sleep 1;
}

sub gd_run {

    my $socket  = FCGI::OpenSocket ($conf->{ammsd}{socket}, $conf->{ammsd}{queue});
    my $request = FCGI::Request (\*STDIN, \*STDOUT, \*STDERR, \%ENV, $socket, FCGI::FAIL_ACCEPT_ON_INTR);
    
    pm_manage (pm_title => "$NAME-pm", n_processes => 1);
    runas ($conf->{ammsd}{user});
    
    $0 = $NAME;

    my ($req, $sub, $res);

    while ($request->Accept() >= 0) {

        pm_pre_dispatch ();
        
        print "Content-Type: text/plain\n\n";

        $req = do { local $/; <STDIN> };

        if ($req){
            $req = substr ($req, 2); # skip q=
            $req = uri_unescape ($req);
            $req = dec ($req);
        } 

        unless ($req->{f}){
            pm_post_dispatch ();
            next;
        }
        
        $sub = $req->{f};
        delete $req->{f};

        debug ($req);
        $res = eval __PACKAGE__ . "::" . $sub . '($req)';
        debug ($res);

        $res->{s} = "ERR $@" if ($@);

        if ($res){        
            print enc ($res);
        }
        pm_post_dispatch ();
    }

    encf ($fh->{limit}, $json->{limit});
    encf ($fh->{traf}, $json->{traf});
    encf ($fh->{uri}, $json->{uri});

    FCGI::CloseSocket($socket);
}

sub debug {
    return unless $DEBUG;
    print STDERR Dumper ($_[0]);
}

sub byte {

    my $req = shift;

    my $value = lc $req->{value}; 

    $value =~ /(\d+\.*\d*)([b|k|m|g]*)/;

    my $dig  = $1 || 0;
    my $unit = $2 || 'b'; # default unit is byte

    my %mul = (b => 1, k => 1024, m => 1048576, g => 1073741824);
    my $byte = int $dig * $mul {$unit};

    return {s=>"OK", b=>$byte};
}

sub delta_time {

    my $req = shift;

    my $period = lc $req->{period};
   
    $period =~ /(\d+)([s|m|h|d]*)/;

    my $dig  = $1 || 0;
    my $unit = $2 || 'd'; # default unit is day

    my %mul = (s => 1, m => 60, h => 3600, d => 86400);
    my $delta_time = $dig * $mul {$unit};

    return {s=>"OK", b=>$delta_time};
}

sub get_limit {

    my $req = shift;

    my $limit = $json->{limit};

    if (exists $req->{type}){
        $limit = $limit->{$req->{type}};
    }
    if (exists $req->{ident}){
        $limit = $limit->{$req->{ident}};
    }

    unless ($limit){
        return {s=>"ERR not found"};
    }

    my %limit_copy = %$limit;

    if ($req->{type} and $req->{ident}){
        $limit_copy {type} = $req->{type};
        $limit_copy {ident} = $req->{ident};
    }
    
    return {s=>"OK", b=>\%limit_copy};
}

sub get_anylimit {

    my $req = shift;

    my $ident = $req->{ident};
    
    my $limit = xb get_limit {type=>"T", ident=>$ident}; # temp limit

    unless ($limit) {
        $limit = xb get_limit {type=>"I", ident=>$ident}; # ident limit
    }
    unless ($limit) {
        $limit = xb get_limit {type=>"P", ident=>$ident}; # parent limit
    }
    unless ($limit){
        return {s=>"ERR not found"};
    }

    if ($limit->{parent}){

        my $parent_limit = xb get_limit {type=>"P", ident=>$limit->{parent} || "default"};

        if ($parent_limit){ # inheritance

            for my $k (keys %$parent_limit) {
		unless (defined $limit->{$k}){
                    $limit->{$k} = $parent_limit->{$k};
		}
            }
        }
    }

    return {s=>"OK", b=>$limit};
}

sub add_limit {

    # type, ident, value, period, stat, desc

    my $req = shift;

    my ($type, $ident) = ($req->{type}, $req->{ident});

    unless ($type or $ident){
        return {s=>"ERR bad param"};
    }

    # check if the limit exists

    my $limit = xb get_limit {type=>$type, ident=>$ident};

    if ($limit){ 
        $req->{desc} = $limit->{desc}; # save description
        $req->{ts} = $limit->{ts}; # save timestamp
    }

    delete $req->{type};
    delete $req->{ident};

    $json->{limit}{$type}{$ident} = $req;

    if ($limit){
        return {s=>"OK"};
    }
    
    # mkdir for data and set now() timestamp for a new limit 

    mkdir (locate ($ident));
    return update_limit_ts ({type=>$type, ident=>$ident, period=>$req->{period}});
}

sub remove_limit {

    my $req = shift;
    
    my ($type, $ident) = ($req->{type}, $req->{ident});

    unless (delete $json->{limit}{$type}{$ident}){
        return {s=>"ERR not found"};
    }

    unless (exists $json->{limit}{T}{$ident} or exists $json->{limit}{I}{$ident} or exists $json->{limit}{P}{$ident}){
        remove_tree (locate ($ident));
    }

    if (encf ($fh->{limit}, $json->{limit})){
        return {s=>"OK"};
    }
    return {s=>"ERR disk write failed"};
}

sub update_limit {

    # type, ident, field, value

    my $req = shift;
    
    my ($type, $ident) = ($req->{type}, $req->{ident});

    unless (exists ($json->{limit}{$type}{$ident})){
        return {s=>"ERR not found"};
    }

    delete $req->{type};
    delete $req->{ident};

    while (my ($k, $v) = each %$req){
        $json->{limit}{$type}{$ident}{$k} = $v;
    }

    if (encf ($fh->{limit}, $json->{limit})){
        return {s=>"OK"};
    }
    return {s=>"ERR disk write failed"};
}

sub update_limit_ts { # update limit timestamp based on timer type
    
    my $req = shift;

    my ($type, $ident, $period) = ($req->{type}, $req->{ident}, $req->{period});
    
    unless (exists ($json->{limit}{$type}{$ident})){
        return {s=>"ERR not found"};
    }

    my ($sec,$min,$hour,$mday,$mon,$year) = localtime (time);

    if ($conf->{timer} eq "abs"){ # absolute timer

        if ($period =~ /m/){ # minutes
            $sec = 0;
        }
        elsif ($period =~ /h/){
            $min = $sec = 0;
        }
        elsif ($period =~ /d/){
            $hour = $min = $sec = 0;
        }
    }
    my $ts = timelocal ($sec, $min, $hour, $mday, $mon, $year);

    $json->{limit}{$type}{$ident}{ts} = $ts;
    
    if (encf ($fh->{limit}, $json->{limit})){
        return {s=>"OK"};
    }
    return {s=>"ERR disk write failed"};
}

sub add_traf {

    my $req = shift;

    my ($ident, $delta_size, $delta_size_hit) = ($req->{ident}, $req->{size}, $req->{size_hit});

    $json->{traf}{$ident}->[0] += $delta_size;
    $json->{traf}{$ident}->[1] += $delta_size_hit;

    return {s=>"OK"};
}

sub get_traf {

    my $req = shift;

    my $traf = $json->{traf};

    if ($req->{ident}){
        $traf = $traf->{$req->{ident}};
    }
    unless ($traf){
        return {s=>"ERR not found"};
    }
    return {s=>"OK", b=>$traf};
}

sub reset_traf {

    my $req = shift;
    my $ident = $req->{ident};

    my $limit = xb get_anylimit {ident=>$ident};
    my $traf = xb get_traf {ident=>$ident};

    unless ($traf){
        return {s=>"ERR not found"};
    }

    if ($traf->[0] != 0 or $traf->[1] != 0){
        
        my $loc = locate (".amms", "tval"); # traffic value
        
        if (open (FH, ">>$loc")){
            printf FH "%s %s %s %s\n", ts ($limit->{ts}), $ident, $traf->[0] || 0, $traf->[1] || 0;
            close FH;
        }
        else {
            warn "Can't write to $loc: $!";
        }

        $loc = locate ($ident, "uri"); # uri size

        if (open (FH, ">>$loc")){
            for my $uri (keys %{$json->{uri}{$ident}}){
                printf FH "%s %s %s\n", ts ($limit->{ts}), $uri, $json->{uri}{$ident}{$uri}; # ts uri size
            }
            close FH;
        }
        else {
            warn "Can't write to $loc: $!";
        }
    }

    $json->{traf}{$ident} = [0,0]; # size, size_hit
    delete $json->{uri}{$ident};

    if (encf ($fh->{traf}, $json->{traf})){
        return {s=>"OK"};
    }
    return {s=>"ERR disk write failed"};
}

sub add_uri {

    my $req = shift;

    my ($ts, $ip, $rcode, $size, $method, $uri, $ident, $mime) = 
       ($req->{ts}, $req->{ip}, $req->{rcode}, $req->{size}, $req->{method},
        $req->{uri}, $req->{ident}, $req->{mime});

    my $loc = locate ($ident, "log");

    if (open (FH, ">>$loc")){ # write personal log
        print FH ts ($ts) . " $ip $rcode $size $method $uri $mime\n";
        close FH;
    }

    my ($type, $http_rcode) = split (/\//, $rcode, 2);

    return {s=>"ERR big rcode"} if ($http_rcode >= 400);

    my $size_hit;

    if ($method =~ /[gc][eo][tn]/i){ # GET | CONNECT
        if ($type =~ /hit/i){ # check hit word
            $size_hit = $size;
            $size = 0;
        }
        else {
            $json->{uri}{$ident}{$uri} += $size;
        }
        return add_traf {ident=>$ident, size=>$size, size_hit=>$size_hit};
    }
    return {s=>"ERR unsupported method"};
}

sub get_uri {

    my $req = shift;

    my $uri;

    if ($req->{ident}){
        $uri = $json->{uri}{$req->{ident}};
    }
    unless ($uri){
        return {s=>"ERR not found"};
    }
    return {s=>"OK", b=>$uri};
}

sub check_access {

    my $req = shift;

    my $ident = $req->{ident};

    my $limit = xb get_anylimit {ident=>$ident};

    unless ($limit){
        return {s=>"ERR not found"};
    }

    if ($limit->{stat}==2){
        return {s=>"ERR disabled by adm"};
    }

    my $type = $limit->{type};

    my $traf = xb get_traf {ident=>$ident};
    my ($size,$size_hit) = @$traf;

    my $now = time;
    my $delta_time = xb delta_time {period=>$limit->{period}};
    my $size_limit = xb byte {value=>$limit->{value}};

    $size += $size_hit if ($conf->{hit_count});

    if ($now >= ($limit->{ts} + $delta_time)) { # expired limit
        
        if ($type eq 'T'){
            return remove_limit {type=>$type, ident=>$ident};
        }
        else {
            reset_traf {ident=>$ident};
            update_limit_ts {type=>$type, ident=>$ident, period=>$limit->{period}};
            update_limit {type=>$type, ident=>$ident, stat => 1} if ($limit->{stat} == 0); # enable
            event ({name=>"check_access.enable", arg=>[$type, $ident]});
            return {s=>"OK"};
        }
    }

    if ($size_limit==0){ # unlim
        return {s=>"OK"};
    }

    if ($size > $size_limit and $now < ($limit->{ts} + $delta_time)){
        if ($limit->{stat} == 1){
            update_limit {type=>$type, ident=>$ident, stat => 0};
            event ({name=>"check_access.disable", arg=>[$type, $ident]});
        }
        return {s=>"ERR disabled by sys"};
    }

    if ($limit->{stat} == 0){ # enable limit after reset_traf
        update_limit {type=>$type, ident=>$ident, stat=>1};
        event ({name=>"check_access.enable", arg=>[$type, $ident]});
    }

    return {s=>"OK"};
}

sub ls_extension {
    my @ext = keys %{$conf->{extension}};
    return {s=>"OK", b=>\@ext};
}

sub get_extension_runner {
    return {s=>"OK", b=>$conf->{ammsed}{uri}};
}

sub event {

    my $req = shift;
    my ($name, $arg) = ($req->{name}, $req->{arg});
    
    # syslog ('notice', $event_name . " " . join (" ", @argv));

    my $event = $conf->{event}{$name};

    unless ($event){
        return {s=>"ERR not found"};
    }

    my ($ext, @arg) = split (/\s+/, $event);

    if ($arg){
        push @arg, @$arg; # join event & ext arguments
    }

    $SIG{CHLD} = "IGNORE";

    my $pid = fork;
    return {s=>"OK", b=>$pid} if $pid;
    
    my $uri = $conf->{ammsed}{uri};

    my $ammsc = AMMS::Client->new;
       $ammsc->connect ($uri) || die "Can't connect to ammsed URI: $uri";

    $ammsc->exe ("run_extension", {name=>$ext, arg=>\@arg});

    exit 0;
}

