#!/usr/bin/perl
# Hash support for AMMS (C) 2010

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# any later version.
        
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
                
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

use strict;

package AMMS::Hash;

use FCGI;
use FCGI::ProcManager qw(pm_manage pm_pre_dispatch pm_post_dispatch);

use DBI;
use Config::General;
use Params::Validate qw(:all);
use Getopt::Long;
use POSIX;
use Sys::Syslog qw(:standard :macros);

my $VERSION = "0.1";
my $DEBUG = 0;

my $config_file;
my $profile;
my %config;
my $foreground;
my %db;

my $pid_file = "/var/run/hashd.pid";

GetOptions ("config|c=s" => \$config_file, "profile|p=s" => \$profile, "foreground|f" => \$foreground);

sub load_config {

    $config_file ||= "/etc/amms.conf";
    $profile ||= "default";
    %config = Config::General::ParseConfig (-ConfigFile => $config_file, -InterPolateVars => 1);
    openlog ('hashd', $config {$profile}{hashd}{log}{options} || 'ndelay,pid', $config {$profile}{hashd}{log}{facility} || 'daemon');
}

my $op = $ARGV [0] || "";

if ($op =~ /^start$/i){
    load_config ();
    run ($foreground);
}
elsif ($op =~ /^stop$/i){
    if (stop ()){ # kill running instance
        print "OK\n";
    }
    exit;
}
elsif ($op =~ /^restart$/i){
    print "Restarting...\n";
    stop ();
    sleep (1);
    load_config ();
    run ($foreground);
}
elsif ($op =~ /^status$/i){
    status ();
    exit;
}
elsif ($op =~ /^version$/i){
    print "$VERSION\n";
    exit;
}
else {
    print "hashd $VERSION\n";
    print "Usage: hashd [--config|-c file] [--foreground|-f] [--profile|-p] start|stop|restart|version\n";
    exit;
}

sub status {

    my $pid;

    if (open (FH, "<$pid_file")){
        $pid = <FH>;
        close FH;
    }
    
    if ($pid){
        if (kill (0, $pid)){
            print "Running with pid $pid\n";
            return;
        }
        else {
            print "Abnormal previous termination\n";
        }
    }
    print "Not running\n";
}

sub run {

    my $fg = shift;
    my $pid;
    
    if (open (FH, "<$pid_file")){
        $pid = <FH>;
        close FH;
    }
    
    if ($pid){
        if (kill (0, $pid)){
            error ("Already running with pid $pid", 1);
        }
        else {
            error ("Abnormal previous termination");
            unlink $pid_file or error ("Can't unlink pid file: $!", 1);
            error ("Old pid file removed");
        }
    }
    
    return if $fg; # foreground mode
    
    # background mode
    
    $| = 1;
    print "Running in background mode\n";
    
    chdir '/' or error ("Can't chdir to /: $!", 1);
    umask 0;
    
    open STDIN, '/dev/null'   or error ("Can't read /dev/null: $!", 1);
    open STDOUT, '>/dev/null' or error ("Can't write to /dev/null: $!", 1);
    open STDERR, '>/dev/null' or error ("Can't write to /dev/null: $!", 1);

    defined ($pid = fork)  or error ("Can't fork: $!");
    exit if $pid;
    setsid or error ("Can't start a new session: $!", 1);
    
    open (FH, ">$pid_file") or error ("Can't write pid file: $!", 1);
    print FH $$;
    close FH;

    chmod 0644, $pid_file;

    syslog ('notice', "Run OK");
    syslog ('notice', sprintf ("listen on %s instances %s qlen %s", $config{$profile}{hashd}{socket},
                                $config{$profile}{hashd}{instances},
                                $config{$profile}{hashd}{queue}));
}

sub stop {
    
    my $pid;
    
    if (open (FH, "<$pid_file")){
        $pid = <FH>;
        close FH;
    }        
    if ($pid){
        unlink $pid_file;
        return kill ("TERM", $pid);
    }
}

sub error {
    
    my ($msg, $die) = @_;
    
    $| = 1;
    
    syslog (LOG_ERR, $msg);
    $die ? die $msg : print "$msg\n";
}

my $socket  = FCGI::OpenSocket ($config{$profile}{hashd}{socket}, $config{$profile}{hashd}{queue});
my $request = FCGI::Request (\*STDIN, \*STDOUT, \*STDERR, \%ENV, $socket, FCGI::FAIL_ACCEPT_ON_INTR);

pm_manage (n_processes => $config{$profile}{hashd}{instances});

$0 = "hashd";

my $user = $config {$profile}{hashd}{user};

if ($user){

    use User::pwent;
    my $pw = getpwnam ($user) || error ("Unknown user $user", 1);

    if (POSIX::setgid ($pw->gid)){
        syslog ('notice', "group id " . $pw->gid);
    }
    if (POSIX::setuid ($pw->uid)){
        syslog ('notice', "user $user id " . $pw->uid);
    }
}

while ($request->Accept() >= 0) {

    pm_pre_dispatch ();

    my ($req, $cmd, @arg, @res, $res);

    $req = $ENV {QUERY_STRING};
    $req =~ s/\%([A-Fa-f0-9]{2})/pack('C', hex($1))/seg;
    $req = substr ($req, 2);

    ($cmd,@arg) = split (/\s/, $req);

    print "Content-Type: text/plain\n\n";

    unless ($cmd){
        pm_post_dispatch ();
        next;
    }

    debug ("> $req\n");

    @res = eval __PACKAGE__ . "::$cmd" . '(@arg)';

    if (@res){
        if (ref ($res [0]) eq "ARRAY"){
            foreach (@res){
                $res = join (' ', @{$_});
                $res.= "\n";
                print $res;
                debug ("< $res");
            }
        }
        else {
            $res = join (' ', @res);
            $res.= "\n";
            print $res;
            debug ("< $res");
        }
    }
    else{
        print "ERR $@\n";
    }

    pm_post_dispatch ();
}

FCGI::CloseSocket($socket);

sub debug {
    return unless $DEBUG;
    print  STDERR $_[0];
}

sub get_dbh {

    my $name = shift;
    my $dbh = $db{$name}{handle};

    if ($dbh){
        unless ($dbh->ping){
            $dbh->disconnect;
            undef $dbh;
        }
    }
    $dbh ||= DBI->connect ($config {$name}{db}{dsn}, $config {$name}{db}{user}, $config{$name}{db}{pass},
                          {RaiseError => 1, PrintError => 1, AutoCommit => 1});

    if ($dbh){
        $db {$name}{handle} = $dbh;
    }
    return $dbh;
}

sub set {

    validate_pos (@_, 1, 1, 1, 1);

    my ($db_name, $table, $key, $val) = @_;
    my $dbh = get_dbh ($db_name);

    $dbh->do ("INSERT INTO `$table` (v1,v2) VALUES (?,?) ON DUPLICATE KEY UPDATE v2=VALUES(v2)", undef, $key, $val);
}

sub get {

    validate_pos (@_, 1, 1, 1);

    my ($db_name, $table, $key) = @_;
    my $dbh = get_dbh ($db_name);

    my $row = $dbh->selectcol_arrayref (qq{ SELECT v2 FROM `$table` WHERE v1=? }, undef, $key);
    return @$row;
}

sub get_all {

    validate_pos (@_, 1, 1);

    my ($db_name, $table, $key) = @_;
    my $dbh = get_dbh ($db_name);

    my $row = $dbh->selectall_arrayref (qq{ SELECT * FROM `$table` });
    return @$row;
}

sub rem {

    validate_pos (@_, 1, 1, 1, 1);

    my ($db_name, $table, $key, $val) = @_;
    my $dbh = get_dbh ($db_name);

    $dbh->do ("DELETE FROM `$table` where v1=? and v2=?", undef, $key, $val);
}

sub check {
    
    validate_pos (@_, 1, 1, 1, 1);

    my ($db_name, $table, $key, $val) = @_;
    my $dbh = get_dbh ($db_name);

    my $row = $dbh->selectall_arrayref ("SELECT * FROM `$table` WHERE v1=? and v2=?", undef, $key, $val);
    
    return "OK" if (@$row);
    
    return "ERR not found";
}

sub check2 {
    
    validate_pos (@_, 1, 1, 1, 1);

    my ($db_name, $table, $key, $val) = @_;
    my $dbh = get_dbh ($db_name);

    my $row = $dbh->selectall_arrayref ("SELECT * FROM `$table` WHERE v1=?", undef, $key);
    
    return "OK" unless (@$row);

    return check (@_);
}

