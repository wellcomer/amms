#!/usr/bin/perl

# Hash support for AMMS (C) 2012

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# any later version.
        
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
                
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

package AMMS::Hash;
use strict;

use lib "/usr/lib/amms";
use AMMS::Lib qw(:all);

use FCGI;
use FCGI::ProcManager qw(pm_manage pm_pre_dispatch pm_post_dispatch);
use Daemon::Generic;
use URI::Escape;

our $NAME = "hashd";
our $VERSION = "0.2";
our $DEBUG = 0;

if ($DEBUG){
    use Data::Dumper;
}

my ($conf, $json, $fh);

newdaemon (
    pidfile  => locate_pid ("$NAME.pid"),
    progname => $NAME
);

sub gd_preconfig {
    
    my ($self) = @_;

    $conf = conf ($self->{configfile});
    
    open ($fh, "+<", $conf->{hashd}{file}) or die "$! " . $conf->{hashd}{file};
    $json = decf ($fh);
    
    return ();
}

sub gd_kill {

    my ($self, $pid) = @_;

    if (kill ("TERM", $pid)){
        print "Process $pid is gone\n";
    }
    sleep 1;
}

sub gd_run {

    my $socket  = FCGI::OpenSocket ($conf->{hashd}{socket}, $conf->{hashd}{queue});
    my $request = FCGI::Request (\*STDIN, \*STDOUT, \*STDERR, \%ENV, $socket, FCGI::FAIL_ACCEPT_ON_INTR);
    
    pm_manage (pm_title => "$NAME-pm", n_processes => 1);
    runas ($conf->{hashd}{user});
    
    $0 = $NAME;

    while ($request->Accept() >= 0) {

        pm_pre_dispatch ();
        
        print "Content-Type: text/plain\n\n";

        my $req = do { local $/; <STDIN> };

        if ($req){
            $req = substr ($req, 2); # skip q=
            $req = uri_unescape ($req);
            $req = dec ($req);
        } 

        unless ($req->{f}){
            pm_post_dispatch ();
            next;
        }

        debug ($req);
        my $res = eval __PACKAGE__ . "::" . $req->{f} . '($req)';
        debug ($res);
        
        $res->{s} = "ERR $@" if ($@);

        if ($res){        
            print enc ($res);
        }
        pm_post_dispatch ();
    }

    FCGI::CloseSocket($socket);
}

sub debug {
    return unless $DEBUG;
    print STDERR Dumper ($_[0]);
}

sub set {

    my $req = shift;
    
    $json->{$req->{key}} = $req->{val};
    if (encf ($fh, $json)){
        return {s=>"OK"};
    }
    return {s=>"ERR write failed"};
}

sub get {
    
    my $req = shift;
    return {s=>"OK", b=>$json->{$req->{key}}};
}

sub get_all {
    return {s=>"OK", b=>$json};
}

sub rem {
    
    my $req = shift;

    if (delete $json->{$req->{key}}){
        if (encf ($fh, $json)){
            return {s=>"OK"};
        }
        return {s=>"ERR write failied"};
    }
    return {s=>"ERR not found"};
}

sub check {
    
    my $req = shift;
    
    if ($json->{$req->{key}} eq $req->{val}){
        return {s=>"OK"};
    }
    return {s=>"ERR not found"};
}

sub check2 {

    my $req = shift;
    
    unless (exists $json->{$req->{key}}){
        return {s=>"OK"};
    }
    return check ($req);
}

