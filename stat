#!/usr/bin/perl
# squid statistic

use strict;
use lib "/usr/lib/amms/";
use AMMS::Client;

my ($uri, $ident,$type) = @ARGV;
my $profile = "squid";

my $ammsc = AMMS::Client->new;
   $ammsc->connect ($uri) || die "Can't connect to ammsd URI: $uri";

my ($type, @val);
my $i;

unless ($ident){ # list all stats

    my @limit = $ammsc->exe ("list_limits", $profile);
    my @traf = $ammsc->exe ("list_traf", $profile);

    my ($ident, $t1, $t2);
    my (%traf1, %traf2);

    foreach (@traf){
        ($ident, $t1, $t2) = split (/\s/, $_);
        $traf1 {$ident} = $t1;
        $traf2 {$ident} = $t2;
    }

    my @lsort;

    foreach (@limit){

        @val = split (/\s/, $_);
        $ident = $val [1];

        next unless ($traf1 {$ident});

        my @val2;
        @val2 = @val [0 .. 2];
        push @val2, kmg ($traf1 {$ident});
        push @val2, kmg ($traf2 {$ident});
        push @val2, @val [3 .. $#val];

        for ($i=0; $i < @val2; $i++){
            $val2 [$i] = '-' if ($val2 [$i] eq '');
        }

        # 0type 1ident 2parent 3traf 4cached 5limit 6period 7stat 8ts 9comment
        push @lsort, sprintf ("%s %-16s %-16s %10s %10s %6s %6s %s %s %s %s\n", @val2);
    }

    @lsort = sort @lsort;

    foreach (@lsort){
        print;
    }
}
else { # show specified stat

    my @val2;

    unless ($type){

        @val = split (/\s/, $ammsc->exe ("get_anylimit", $profile, $ident));
        print ("ERR Not found") && exit unless (@val);
        my @traf = split (/\s/, $ammsc->exe ("get_traf", $profile, $ident));

        @val2 = @val [0 .. 2];
        push @val2, kmg ($traf [0]);
        push @val2, kmg ($traf [1]);
        push @val2, @val [3 .. $#val];

        for ($i=0; $i < @val2; $i++){
            $val2 [$i] = '-' if ($val2 [$i] eq '');
        }
    }

    $val2[8] = $val2[8] . " " . format_time ($val2[8]);

    print join (" ", @val2);
}

sub kmg { # human readable values
    
    my $bytes = shift;
    my $value = $bytes;
            
    my $g = 1073741824;
    my $m = 1048576;
    my $k = 1024;
                        
    if ($bytes >= $g){
        $value = sprintf ('%.2f%s', $bytes / $g, 'G');
    }
    elsif ($bytes >= $m){
        $value = sprintf ('%.1f%s', $bytes / $m, 'M');
    }
    elsif ($bytes >= $k){
        $value = sprintf ('%.1f%s', $bytes / $k, 'K');
    }
    
    $value =~ s/\.0+\s/ /g;
    
    return $value;
}

sub format_time {

    my $ts = shift;
    my @tm = localtime ($ts);

    return sprintf ("%04d-%02d-%02d %02d:%02d:%02d", $tm[5]+1900, $tm[4]+1, $tm[3], $tm[2], $tm[1], $tm[0]);
}


