#!/usr/bin/perl

# Client for hashd daemon (C) 2012

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# any later version.
        
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
                
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

use strict;
use feature qw(say);

use lib "/usr/lib/amms";
use AMMS::Lib qw(xs xb);
use AMMS::Client;
use Getopt::Long;

my ($uri, $res, $pre);

GetOptions ("uri|u=s" => \$uri, "prefix|p=s" => \$pre);

my ($do, $key, $val) = @ARGV;

$do ||= 'ls';

my $hashd = AMMS::Client->new;
   $hashd->connect ($uri) || die "Can't connect to hashd URI: $uri";

if ($do =~ /ls*/i){
    
    $res = $hashd->exe ("get_all");
    die "ERR undef response" unless $res;

    my $body = xb $res;

    while (my ($key, $val) = each %$body){
        if ($pre){
            next if ($key !~ /^$pre/);
            $key =~ s/$pre//;
        }
        printf ("%-16s %s\n", $key, $val);
    }
}
elsif ($do =~ /se*t*/){
    say xs $hashd->exe ("set", {key=>"$pre$key", val=>$val});
}
elsif ($do =~ /re*m*/){
    say xs $hashd->exe ("rem", {key=>"$pre$key"});
}
elsif ($do =~ /ch*e*c*k*/){
    say xs $hashd->exe ("check", {key=>"$pre$key", val=>$val});
}
elsif ($do =~ /ge*t*/){
    say xb $hashd->exe ("get", {key=>"$pre$key"});
}
else { # print help
    say "Options: --uri|-u uri [--prefix|-p prefix] (ls|set key val|rem key|check key val)";
}
