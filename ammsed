#!/usr/bin/perl

# AMMS FCGI extension runner (C) 2012

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# any later version.
        
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
                
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

use strict;

use lib "/usr/lib/amms";
use AMMS::Lib qw(:all);

use utf8;

use FCGI;
use FCGI::ProcManager qw(pm_manage pm_pre_dispatch pm_post_dispatch);
use Daemon::Generic;
use URI::Escape;
use IPC::Run qw(run timeout);

our $NAME = "ammsed";
our $VERSION = 0.1;
our $DEBUG = 0;

my ($conf, $fh, $json);

newdaemon (
    pidfile  => locate_pid ("$NAME.pid"),
    progname => $NAME
);

sub gd_preconfig {
    
    my ($self) = @_;

    $conf = conf ($self->{configfile});

    return ();
}

sub gd_kill {

    my ($self, $pid) = @_;

    if (kill ("TERM", $pid)){
        print "Process $pid is gone\n";
    }
    sleep 1;
}

sub gd_run {

    my $socket  = FCGI::OpenSocket ($conf->{$NAME}{socket}, $conf->{$NAME}{queue});
    my $request = FCGI::Request (\*STDIN, \*STDOUT, \*STDERR, \%ENV, $socket, FCGI::FAIL_ACCEPT_ON_INTR);

    my $path = $ENV{PATH};
    
    pm_manage (pm_title => "$NAME-pm", n_processes => $conf->{$NAME}{instances});

    runas ($conf->{$NAME}{user});
    
    $0 = $NAME;

    my ($req, $sub, $res);

    while ($request->Accept() >= 0) {

        pm_pre_dispatch ();
        
        print "Content-Type: text/plain\n\n";

        $req = do { local $/; <STDIN> };

        if ($req){
            $req = substr ($req, 2); # skip q=
            $req = uri_unescape ($req);
            $req = dec ($req);
        } 

        unless ($req->{f}){
            pm_post_dispatch ();
            next;
        }
        
        $sub = $req->{f};
        delete $req->{f};

        $ENV{PATH} = $path; # PATH for File::Which

        debug ($req);
        $res = eval __PACKAGE__ . "::" . $sub . '($req)';
        debug ($res);

        $res->{s} = "ERR $@" if ($@);

        if ($res){        
            print enc ($res);
        }
        pm_post_dispatch ();
    }

    FCGI::CloseSocket($socket);
}

sub debug {
    return unless $DEBUG;
    print STDERR Dumper ($_[0]);
}

sub run_extension {

    my $req = shift;
    my ($name, $arg) = ($req->{name}, $req->{arg});

    my $ext = $conf->{extension}{$name};
    my @arg_from_conf;

    ($ext, @arg_from_conf) = split (/\s+/, $ext);
    
    my (@cmd, $in, $out, $err);

    push @cmd, $ext;
    push @cmd, @arg_from_conf;
    push @cmd, @$arg;

    run (\@cmd, \$in, \$out, \$err, timeout ($conf->{$NAME}{timeout})) or return {s=>"ERR $err"};

    return {s=>"OK", b=>$out};
}

