#!/usr/bin/perl

use strict;

use lib "/usr/lib/amms/";
use AMMS::Lib qw(:all);
use AMMS::Client;
use File::Which;

my ($uri, $ident, $date) = @ARGV;

die "No uri" unless $uri;
die "No ident" unless $ident;

$date ||= "today";

my $file = locate (".amms", "tval");
$date = fdate ($date);
$date =~ s/"//g;

my $grep = which ("grep");
my $search = "\"$date $ident\"";

my $text = `$grep $search $file`;
my @line = split ("\n", $text);

my (%size, %desc, $stub, $id, $v1, $v2);

# values from tval

for (@line){
    my ($stub, $stub, $id, $v1, $v2) = split;
    $size {$id}[0] += $v1;
    $size {$id}[1] += $v2;
}

my $ammsc = AMMS::Client->new;

unless ($ammsc->connect ($uri)){
    die "Can't connect to amms daemon";
}

my $limit = xb $ammsc->exe ("get_limit");
my $traf = xb $ammsc->exe ("get_traf");

my $ts;
my @type = qw(T I);

# values from ammsd traf

for my $type (@type){

    for $id (keys %{$limit->{$type}}){
        $desc {$id} = $limit->{$type}{$id}{desc};
        next unless (grep (/$ident/, ($id)));
        $ts = ts ($limit->{$type}{$id}{ts});
        next unless (grep (/$date/, $ts));
        $size {$id}[0] += $traf->{$id}[0];
        $size {$id}[1] += $traf->{$id}[1];
        $traf->{$id} = [0,0];
    }
}

if ((keys %size) == 0){
    die "Not found";
}

$v1 = $v2 = 0; # size, size_hit

my $format = "%s %s %s %s %s %s\n";
my $print_total;

if ((keys %size) > 1){
    $format = "%-16s %7s %7s %12s %12s %s\n";
    $print_total = 1;
}

my @ids = sort keys %size;

for $id (@ids){
    $v1 += $size{$id}[0];
    $v2 += $size{$id}[1];
    printf $format, $id, kmg ($size{$id}[0]) || 0, kmg ($size{$id}[1]) || 0, $size{$id}[0], $size{$id}[1], $desc{$id};
}

if ($print_total){
    printf "\n%-16s %7s %7s %12s %12s\n", "Total",  kmg ($v1) || 0, kmg ($v2) || 0, $v1, $v2;
}
